!obj:pylearn2.train.Train {
    dataset: &train !obj:ift6266h15.code.pylearn2.datasets.variable_image_dataset.DogsVsCatsTmp {
        transformer: &transformer !obj:ift6266h15.code.pylearn2.datasets.variable_image_dataset.RandomCrop {
            scaled_size: 200, #256,
            crop_size: 192,
        },
        start: 0,
        stop: 20000,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [192, 192],
            num_channels: 3,
        },
        layers: [
                !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'conv',
                     #address: 'filters.npy',
                     output_channels: 512,
                     irange: 0.05,
                     kernel_shape: [32, 32],
                     pool_shape: [8, 8],
                     pool_stride: [8, 8],
                 },
                 !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'FC',
                     dim: 1024,
                     #sparse_init: 10
                     irange: 0.1
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 2,
                     irange: 0.5,
                 },
        ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: &batch_size 25,
        train_iteration_mode: 'batchwise_shuffled_sequential',
        batches_per_iter: 80,
        monitoring_batch_size: *batch_size,
        monitoring_batches: 40,
        monitor_iteration_mode: 'batchwise_shuffled_sequential',
        #learning_rule : !obj:pylearn2.training_algorithms.learning_rule.AdaDelta {
        #},
        learning_rate: 1e-3,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.9
        },
        monitoring_dataset: {
            'train' : *train,
            'valid': !obj:ift6266h15.code.pylearn2.datasets.variable_image_dataset.DogsVsCatsTmp {
                transformer: *transformer,
                start: 20000,
                stop: 22500,
            },
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [!obj:pylearn2.costs.cost.MethodCost {
                        method: 'cost_from_X'
                    },
                    !obj:pylearn2.costs.mlp.WeightDecay {
                        coeffs: [ .0000001, .000001, .000001]
                    },
                    #!obj:pylearn2.costs.mlp.dropout.Dropout {
                    #    input_include_probs: {'y':.1},
                    #    #input_scales: { 'h0' : 1. }
                    #},
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 5000
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "/data/lisatmp3/mehris/catdog_exp10_zae/noPretrain_take2/_best.pkl"
        },
        !obj:pylearn2.train_extensions.plots.plots.PlotManager {
            plots: [
                    !obj:pylearn2.train_extensions.plots.plots.Plots {
                        save_path: "./train_crvs.png",
                        channel_names: [
                            'train_y_misclass',
                            'valid_y_misclass',
                            #'test_y_misclass'
                        ],
                        share: 1
                    },
              ],
              freq: 20,
            },
    ],
    save_path: "/data/lisatmp3/mehris/catdog_exp10_zae/noPretrain_take2/save20.pkl",
    save_freq: 20
}

